// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        Int      @id @default(autoincrement())
  nombre    String
  email     String   @unique
  password  String
  rol       String   // SUPER_ADMIN, ADMIN, USUARIO
  activo    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Instructor {
  id         Int      @id @default(autoincrement())
  nombre     String   @unique
  password   String?
  extrainfo  Json?
  ultimoBono Json?    // Nuevo campo JSON para almacenar {disciplinaId: periodoId}
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  clases      Clase[]
  pagos       PagoInstructor[]
  disciplinas Disciplina[]
  categorias  CategoriaInstructor[] // Nueva relación para categorías
}

model Disciplina {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique
  descripcion String?
  color       String?
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  clases      Clase[]
  formulas    Formula[]
  instructores Instructor[]
  categorias  CategoriaInstructor[] // Nueva relación para categorías
}

model Periodo {
  id          Int      @id @default(autoincrement())
  numero      Int
  año         Int
  fechaInicio DateTime
  fechaFin    DateTime
  fechaPago   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bonoCalculado Boolean? @default(false)

  // Relaciones
  clases     Clase[]
  pagos      PagoInstructor[]
  formulas   Formula[]
  categorias CategoriaInstructor[] // Nueva relación para categorías
}

model Formula {
  id           Int      @id @default(autoincrement())
  disciplinaId Int
  periodoId    Int
  
 
  // Requisitos para categorías (ocupación, clases, etc.)
  requisitosCategoria Json // Almacena los requisitos para cada categoría (Instructor, Embajador Junior, etc.)
  // Parámetros de pago por categoría
  parametrosPago Json // Almacena los parámetros de pago para cada categoría (mínimo garantizado, tarifas, máximo)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  disciplina Disciplina @relation(fields: [disciplinaId], references: [id])
  periodo    Periodo    @relation(fields: [periodoId], references: [id])

  // Restricción de unicidad para evitar duplicados en el mismo periodo y disciplina
  @@unique([disciplinaId, periodoId])
}

// Nuevo modelo para asignar categorías a instructores por disciplina
model CategoriaInstructor {
  id           Int      @id @default(autoincrement())
  instructorId Int
  disciplinaId Int
  periodoId    Int
  categoria    String   // Valores: "INSTRUCTOR", "EMBAJADOR_JUNIOR", "EMBAJADOR", "EMBAJADOR_SENIOR"
  
  // Métricas de rendimiento actuales (opcionales)
  metricas     Json?    // Almacena las métricas actuales del instructor (ocupación, clases, etc.)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  instructor Instructor @relation(fields: [instructorId], references: [id])
  disciplina Disciplina @relation(fields: [disciplinaId], references: [id])
  periodo    Periodo    @relation(fields: [periodoId], references: [id])

  // Restricción de unicidad para evitar duplicados
  @@unique([instructorId, disciplinaId, periodoId])
}

model Clase {
  id              String      @id  
  pais            String
  ciudad          String
  disciplinaId    Int
  semana          Int
  estudio         String
  instructorId    Int
  periodoId       Int
  salon           String
  reservasTotales Int      @default(0)
  listasEspera    Int      @default(0)
  cortesias       Int      @default(0)
  lugares         Int
  reservasPagadas Int      @default(0)
  textoEspecial   String?
  fecha           DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  instructor  Instructor @relation(fields: [instructorId], references: [id])
  disciplina  Disciplina @relation(fields: [disciplinaId], references: [id])
  periodo     Periodo    @relation(fields: [periodoId], references: [id])
  }

  model PagoInstructor {
    id          Int      @id @default(autoincrement())
    monto       Float
    estado      String   @default("PENDIENTE")
    instructorId Int
    periodoId   Int
    detalles    Json?
    cumpleLineamientos Boolean?
    dobleteos Int?  // Relaciones
    horariosNoPrime Int?
    participacionEventos Boolean?

    // Campos actualizados
    retencion   Float   @default(0.0) // Monto retenido
    reajuste    Float   @default(0.0) // Ajuste aplicado al pago
    tipoReajuste String @default("FIJO") // Puede ser "FIJO" o "PORCENTAJE"
    bono        Float?  // Monto del bono

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    pagoFinal Float 
    // Relaciones
    instructor  Instructor @relation(fields: [instructorId], references: [id])
    periodo     Periodo    @relation(fields: [periodoId], references: [id])

    // Restricción de unicidad
    @@unique([instructorId, periodoId])
  }

model Archivo {
  id Int @id @default(autoincrement())
  nombre String
  tipo String?
  url String
  descripcion String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
