// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        Int      @id @default(autoincrement())
  nombre    String
  email     String   @unique
  password  String
  rol       String   // SUPER_ADMIN, ADMIN, USUARIO
  activo    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Instructor {
  id             Int      @id @default(autoincrement())
  nombre         String   @unique
  nombreCompleto String?  // Nuevo campo
  activo         Boolean  @default(true) // Nuevo campo
  password       String?
  extrainfo      Json?
  ultimoBono     Json?    // Campo JSON para almacenar {disciplinaId: periodoId}
  
  // Nuevos campos opcionales
  personaContacto String?
  cuentaBancaria  String?
  CCI             String?
  banco           String?
  celular         String?
  DNI              Int?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  clases         Clase[]
  pagos          PagoInstructor[]
  disciplinas    Disciplina[]
  categorias     CategoriaInstructor[] // Relación para categorías
  
  // Nuevas relaciones para covers y penalizaciones
  coversComoDador    Cover[]   @relation("InstructorOriginal")
  coversComoReemplazo Cover[]   @relation("InstructorReemplazo")
  penalizaciones Penalizacion[]
}

model Disciplina {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique
  descripcion String?
  color       String?
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  clases      Clase[]
  formulas    Formula[]
  instructores Instructor[]
  categorias  CategoriaInstructor[] // Relación para categorías
  penalizaciones Penalizacion[]
  covers      Cover[] // Nueva relación para covers
}

model Periodo {
  id          Int      @id @default(autoincrement())
  numero      Int
  año         Int
  fechaInicio DateTime
  fechaFin    DateTime
  fechaPago   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bonoCalculado Boolean? @default(false)

  reglasDescuento Json? 
  // Relaciones
  clases     Clase[]
  pagos      PagoInstructor[]
  formulas   Formula[]
  categorias CategoriaInstructor[] // Relación para categorías
  covers     Cover[]
  penalizaciones Penalizacion[]
}

model Formula {
  id           Int      @id @default(autoincrement())
  disciplinaId Int
  periodoId    Int
  
  // Requisitos para categorías (ocupación, clases, etc.)
  requisitosCategoria Json // Almacena los requisitos para cada categoría (Instructor, Embajador Junior, etc.)
  // Parámetros de pago por categoría
  parametrosPago Json // Almacena los parámetros de pago para cada categoría (mínimo garantizado, tarifas, máximo)
  
  // Configuración de penalizaciones y descuentos
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  disciplina Disciplina @relation(fields: [disciplinaId], references: [id])
  periodo    Periodo    @relation(fields: [periodoId], references: [id])

  // Restricción de unicidad para evitar duplicados en el mismo periodo y disciplina
  @@unique([disciplinaId, periodoId])
}

// Modelo para asignar categorías a instructores por disciplina
model CategoriaInstructor {
  id           Int      @id @default(autoincrement())
  instructorId Int
  disciplinaId Int
  periodoId    Int
  categoria    String   // Valores: "INSTRUCTOR", "EMBAJADOR_JUNIOR", "EMBAJADOR", "EMBAJADOR_SENIOR"
  esManual Boolean? @default(false)
  // Métricas de rendimiento actuales (opcionales)
  metricas     Json?    // Almacena las métricas actuales del instructor (ocupación, clases, etc.)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  instructor Instructor @relation(fields: [instructorId], references: [id])
  disciplina Disciplina @relation(fields: [disciplinaId], references: [id])
  periodo    Periodo    @relation(fields: [periodoId], references: [id])

  // Restricción de unicidad para evitar duplicados
  @@unique([instructorId, disciplinaId, periodoId])
}

model Clase {
  id              String    @id  
  pais            String
  ciudad          String
  disciplinaId    Int
  semana          Int
  estudio         String
  instructorId    Int
  periodoId       Int
  salon           String
  reservasTotales Int       @default(0)
  listasEspera    Int       @default(0)
  cortesias       Int       @default(0)
  lugares         Int
  reservasPagadas Int       @default(0)
  textoEspecial   String?
  fecha           DateTime
  instructorReemplazoId Int?  // ID del instructor que cubre la clase
  tipoPenalizacion    String?  // Tipo de penalización si aplica
  puntosPenalizacion  Int?
  // Nuevos campos
  esVersus        Boolean   @default(false)
  vsNum           Int?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relaciones
  instructor  Instructor @relation(fields: [instructorId], references: [id])
  disciplina  Disciplina @relation(fields: [disciplinaId], references: [id])
  periodo     Periodo    @relation(fields: [periodoId], references: [id])
  covers      Cover[]    // Una clase puede tener múltiples covers
}

// Modelo actualizado para manejar los covers
model Cover {
  id                    Int      @id @default(autoincrement())
  
  // Información básica del cover
  instructorOriginalId  Int      // Instructor que debía dar la clase
  instructorReemplazoId Int      // Instructor que hace el cover
  disciplinaId          Int      // Disciplina de la clase
  periodoId             Int      // Periodo al que pertenece
  fecha                 DateTime // Fecha de la clase
  hora                  String   // Hora de la clase (formato "HH:mm")
  
  // Información opcional de clase existente
  claseId               String?  // ID de la clase que está siendo cubierta (opcional)
  
  // Estados y configuraciones (solo modificables por managers/admin)
  status                String   @default("PENDIENTE") // PENDIENTE, APROBADO, RECHAZADO
  justificacion         Boolean  @default(false)
  pagoBono              Boolean  @default(false)
  pagoFullHouse         Boolean  @default(false)
  comentarios           String?
  cambioDeNombre        String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relaciones
  instructorOriginal    Instructor @relation("InstructorOriginal", fields: [instructorOriginalId], references: [id])
  instructorReemplazo   Instructor @relation("InstructorReemplazo", fields: [instructorReemplazoId], references: [id])
  disciplina            Disciplina @relation(fields: [disciplinaId], references: [id])
  periodo               Periodo    @relation(fields: [periodoId], references: [id])
  clase                 Clase?     @relation(fields: [claseId], references: [id])
}

// Nueva tabla para el sistema de penalizaciones
model Penalizacion {
  id           Int      @id @default(autoincrement())
  instructorId Int      // Instructor penalizado
  disciplinaId Int?     // Disciplina relacionada (opcional)
  periodoId    Int      // Periodo al que pertenece
  
  // Tipos de penalización según tu imagen
  tipo         String   // CANCELACION_FIJA, CANCELACION_FUERA_TIEMPO, CANCELAR_MENOS_24HRS, COVER_DEL_COVER, SALIR_TARDE, PERSONALIZADA
  puntos       Int      // Puntos de penalización
  descripcion  String?  // Descripción adicional
  
  // Campos adicionales para flexibilidad
  activa       Boolean  @default(true)
  aplicadaEn   DateTime @default(now()) // Fecha en que se aplicó la penalización
  comentarios  String?  // Comentarios adicionales
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  instructor Instructor  @relation(fields: [instructorId], references: [id])
  disciplina Disciplina? @relation(fields: [disciplinaId], references: [id])
  periodo    Periodo     @relation(fields: [periodoId], references: [id])
}

model PagoInstructor {
  id                  Int      @id @default(autoincrement())
  monto               Float
  estado              String   @default("PENDIENTE")
  instructorId        Int
  periodoId           Int
  detalles            Json?
  cumpleLineamientos  Boolean?
  dobleteos           Int?
  horariosNoPrime     Float?
  participacionEventos Boolean?

  // Campos actualizados
  retencion           Float    @default(0.0) // Monto retenido
  reajuste            Float    @default(0.0) // Ajuste aplicado al pago
  penalizacion        Float    @default(0.0)
  cover               Float    @default(0.0)
  tipoReajuste        String   @default("FIJO") // Puede ser "FIJO" o "PORCENTAJE"
  bono                Float?   // Monto del bono

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  pagoFinal           Float 
  comentarios         String?
  
  
  // Relaciones
  instructor          Instructor @relation(fields: [instructorId], references: [id])
  periodo             Periodo    @relation(fields: [periodoId], references: [id])

  // Restricción de unicidad
  @@unique([instructorId, periodoId])
}

model Archivo {
  id          Int      @id @default(autoincrement())
  nombre      String
  tipo        String?
  url         String
  descripcion String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}